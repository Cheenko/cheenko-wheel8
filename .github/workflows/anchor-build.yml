name: Anchor Build (wheel8)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Anchor project dir
        id: finddir
        shell: bash
        run: |
          if [ -f Anchor.toml ]; then
            echo "project_dir=." >> "$GITHUB_OUTPUT"
          elif [ -f wheel8/Anchor.toml ]; then
            echo "project_dir=wheel8" >> "$GITHUB_OUTPUT"
          else
            echo "No Anchor.toml found at repo root or wheel8/"
            ls -la
            exit 1
          fi

      - name: Install system build deps
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev libudev-dev curl ca-certificates wget bzip2
          sudo update-ca-certificates

      - name: Set up Rust (stable)
        shell: bash
        run: |
          set -euxo pipefail
          curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          source "$HOME/.cargo/env"
          rustc --version
          cargo --version

      - name: Install Solana CLI (v1.18.22)
        shell: bash
        run: |
          set -euxo pipefail
          SOLANA_VERSION="1.18.22"
          if ! curl -fsSL --retry 5 --retry-delay 2 --connect-timeout 15 "https://release.solana.com/v${SOLANA_VERSION}/install" | sh -s - -y; then
            TARBALL="solana-release-x86_64-unknown-linux-gnu.tar.bz2"
            wget --retry-connrefused --waitretry=2 --read-timeout=20 --timeout=30 -t 5 \
              "https://github.com/solana-labs/solana/releases/download/v${SOLANA_VERSION}/${TARBALL}"
            tar -xjf "${TARBALL}"
            echo "$PWD/solana-release/bin" >> "$GITHUB_PATH"
            "$PWD/solana-release/bin/solana" --version
          else
            echo "$HOME/.local/share/solana/install/active_release/bin" >> "$GITHUB_PATH"
            "$HOME/.local/share/solana/install/active_release/bin/solana" --version
          fi

      - name: Install Anchor CLI (cargo v0.31.2)
        shell: bash
        run: |
          set -euxo pipefail
          source "$HOME/.cargo/env"
          cargo install --git https://github.com/coral-xyz/anchor --tag v0.31.2 anchor-cli --locked
          "$HOME/.cargo/bin/anchor" --version

      - name: Cache cargo & sbf
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cache/sbf
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Anchor program
        shell: bash
        working-directory: ${{ steps.finddir.outputs.project_dir }}
        env:
          ANCHOR_USE_SBF_V2: "1"
        run: |
          set -euxo pipefail
          source "$HOME/.cargo/env"
          solana --version
          "$HOME/.cargo/bin/anchor" --version
          "$HOME/.cargo/bin/anchor" build --verbose 2>&1 | tee build.log

      - name: Show build outputs
        shell: bash
        working-directory: ${{ steps.finddir.outputs.project_dir }}
        run: |
          set -e
          find target -maxdepth 4 -type f -size +0c | sort || true

      - name: Verify deployable artifacts exist
        shell: bash
        working-directory: ${{ steps.finddir.outputs.project_dir }}
        run: |
          set -euxo pipefail
          KEYPAIR=$(find target/deploy -maxdepth 1 -name "*-keypair.json" -type f | head -n1 || true)
          if [ -z "${KEYPAIR}" ]; then
            echo "::error::No *-keypair.json found in target/deploy"
            echo "----- build.log (tail) -----"
            tail -n 200 build.log || true
            exit 1
          fi
          NAME="$(basename "$KEYPAIR" | sed 's/-keypair\.json$//')"
          test -f "target/deploy/${NAME}.so" || { echo "::error::Missing target/deploy/${NAME}.so"; exit 1; }
          test -f "target/idl/${NAME}.json"  || { echo "::warning::Missing target/idl/${NAME}.json (continuing)"; true; }
          echo "Artifacts OK for program: $NAME"

      - name: Upload build artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: wheel8-artifacts
          path: |
            ${{ steps.finddir.outputs.project_dir }}/target/deploy/*
            ${{ steps.finddir.outputs.project_dir }}/target/idl/*
            ${{ steps.finddir.outputs.project_dir }}/build.log
