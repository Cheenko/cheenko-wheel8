name: Anchor Build (wheel8)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Anchor project dir
        id: finddir
        shell: bash
        run: |
          if [ -f Anchor.toml ]; then
            echo "project_dir=." >> "$GITHUB_OUTPUT"
          elif [ -f wheel8/Anchor.toml ]; then
            echo "project_dir=wheel8" >> "$GITHUB_OUTPUT"
          else
            echo "No Anchor.toml found at repo root or wheel8/"
            ls -la
            exit 1
          fi

      - name: Install system build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev libudev-dev

      - name: Set up Rust (stable)
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustc --version || true

      - name: Set up Node (>=20.18)
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.0"

      - name: Check Anchor CLI (pinned)
        shell: bash
        working-directory: ${{ steps.finddir.outputs.project_dir }}
        run: |
          set -euxo pipefail
          node -v
          npm -v
          npx -y @coral-xyz/anchor-cli@0.31.2 anchor --version

      - name: Build Anchor program (pinned CLI)
        shell: bash
        working-directory: ${{ steps.finddir.outputs.project_dir }}
        run: |
          set -euxo pipefail
          npx -y @coral-xyz/anchor-cli@0.31.2 anchor build --verbose 2>&1 | tee build.log

      - name: Show build outputs (target tree)
        shell: bash
        working-directory: ${{ steps.finddir.outputs.project_dir }}
        run: |
          echo "Target tree (depth 4):"
          find target -maxdepth 4 -type f -size +0c | sort || true

      - name: Cache cargo & sbf
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cache/sbf
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Anchor program
        shell: bash
        working-directory: ${{ steps.finddir.outputs.project_dir }}
        run: |
          set -euxo pipefail
          ./node_modules/.bin/anchor build --verbose 2>&1 | tee build.log

      - name: Show build outputs (target tree)
        shell: bash
        working-directory: ${{ steps.finddir.outputs.project_dir }}
        run: |
          echo "Target tree (depth 4):"
          find target -maxdepth 4 -type f -size +0c | sort || true

      - name: Verify deployable artifacts exist
        shell: bash
        working-directory: ${{ steps.finddir.outputs.project_dir }}
        run: |
          set -euxo pipefail
          # Find any program name by keypair (authoritative)
          KEYPAIR=$(find target/deploy -maxdepth 1 -name "*-keypair.json" -type f | head -n1 || true)
          if [ -z "${KEYPAIR}" ]; then
            echo "::error::No *-keypair.json found in target/deploy"
            echo "----- build.log (tail) -----"
            tail -n 200 build.log || true
            exit 1
          fi
          NAME="$(basename "$KEYPAIR" | sed 's/-keypair\.json$//')"
          echo "Detected program name: $NAME"
          test -f "target/deploy/${NAME}.so" || { echo "::error::Missing target/deploy/${NAME}.so"; exit 1; }
          test -f "target/idl/${NAME}.json"  || { echo "::warning::Missing target/idl/${NAME}.json (continuing)"; true; }

      - name: Upload build artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: wheel8-artifacts
          path: |
            wheel8/target/deploy/*
            wheel8/target/idl/*
            wheel8/build.log

